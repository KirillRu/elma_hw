package main

import (
	"elma_hw/internal/services"
	"net/http"
)

func main() {
	/*	jsonstr := "[[[1790,138,135,434,1192,1595,1322,1443,298,72,919,802,869,1884,1516,404,1734,1358,96,329,1123,453,1212,779,647,128,534,1216,1206,868,577,360,175,1114,1648],30],[[1013,1415,60,458,1757,1130,1993,610,596,213,317,911,1561,113,515,330,1697,1163,1523,565,1147,298,1866,87,561,77,1555,221,20,469,1484,798,1063,40,1698,1296,789,803,1786,973,20,247,161,693,268,1507,672,520,360,1534,163,1718,550,1105,1107,922,683,1306,531,350,760,1089,749,1850,200,421,1385,950,740],52],[[800,381,1731,1237,164,1235,1563,1043,1033,1678,231,69,1683,1455,1162,781,1943,155,598,1455,252,257,1002,453,529,95,1215,1146,1761,1844,213,54,36,1537,863,1542,1120,55,190,401,534,835,622,1382,771,230,1971,633,1917,1464,405,1966,975,1449,1057,1108,1026,1918,148,1238,1233,1455,100,392,809,648,314,702,1137,1653,1458,1420,1355,427,1886,1140,347,1203],50],[[150,631,1477,843,1141,115,416,1631,344,1994,1264,1230,1704,1529,1287],39],[[175,1737,1814,1458,1488,75,1705,851,1084,258,170,1946,1791,1905,997,1531,1899,502,1875,1523,559,275,793,65,1159,139,1410,1433,147,1996,636,612,115,540,1275,656,821,563,827,1344,1441,1426,803,1355,866,1854,1621,1928,1819,1337,1303,619,333,814,1067,174,717,357,39,1408,1216,1125,1321,998,1669,1829,1208,1776,234,1677,206,1617,191,664,1317,1503,936,256],50],[[575,511,1140,461,1222,1212,1811,193,1899,382,933,1040,666,1583,752,693,513,844,1186,168,139,1022,200,1507,1896,1298,979,853,1941,884,271,1232,1702,509,973,1632,1514,1994,1009,1627,1668,423,770,1013,424,66,1316,1473,1884,1487,1501,481],79],[[46,946,1881,989,1910,1845,1327,557,914,1985,1557,1482,1683,872,1950,393,79,981,1843,1012,683,1524,122,824,1599,983,855,1432,1990,809,52,43,918,260,847,1406,1716,326,811,276,615,1991,1876,855,1032,865,461,1075,1639,671,1303,1558,1020,220,1958,503,1300,1984,1131,130,1135,1053,507,1385,1721,877,184,1291,151,584,1673,1877,1742,176,221,1639,245],62],[[51,1170,1053,602,1291,83,483,306,1185,959,1459,1897,1871,1391,1589,1753,1603,581,773,1273],83],[[1633,840,1300,1757,204,24,642,1367,1756,1803,565,178,995,975,973,265,889,1160,1497,1007,671,1100,1672,1157,562,405,814,1637,1996,1969,1578,721,1474,1580,1555,1355,1309,1400,1763,986,1015,947,563,1679,1650,1627,1950,1344,754,445,989,468,1213,1540,452,1593,1085,1816,1005,1251],31],[[741,1801,606,1126,757,1712,409,792,1418,1978,1668,1104,1461,1296,1186,1243,156,1689,1801,1774,335,1891,1096,99,433,1148,1884,1809,1244,1857,423,217,1786,1413,266,940,210,1884,456,772,1408,909,213,1866,1581,1864,1187,587,726,766,552,60,1997,640,605,1497,82,1288,433,717,921,1092,710,1359,462,1097,95,1130,1140,628,1185,820,461,866,1299,1483,1744],98]]"
		var answer []interface{}
		jsonErr := json.Unmarshal([]byte(jsonstr), &answer)
		if jsonErr != nil {
			fmt.Println(jsonErr.Error())
		}
		res := []models.CyclicRotation{}
		for _, el := range answer {
			row := el.([]interface{})
			a := []int16{}
			for _, i := range row[0].([]interface{}) {
				a = append(a, int16(i.(float64)))
			}
			res = append(res, models.CyclicRotation{ArrayIn: a, RotationCounts: uint8(row[1].(float64))})
		}
		fmt.Println(res)
	*/
	server := services.New()
	err := http.ListenAndServe("localhost:3000", server.BuildRoutes())
	if err != nil {
		panic(err)
	}
}
